// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

package player

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for creating a new player
type PlayerRequest struct {
	// API versioning
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Phone                string   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerRequest) Reset()         { *m = PlayerRequest{} }
func (m *PlayerRequest) String() string { return proto.CompactTextString(m) }
func (*PlayerRequest) ProtoMessage()    {}
func (*PlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{0}
}

func (m *PlayerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerRequest.Unmarshal(m, b)
}
func (m *PlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerRequest.Marshal(b, m, deterministic)
}
func (m *PlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRequest.Merge(m, src)
}
func (m *PlayerRequest) XXX_Size() int {
	return xxx_messageInfo_PlayerRequest.Size(m)
}
func (m *PlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRequest proto.InternalMessageInfo

func (m *PlayerRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *PlayerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlayerRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PlayerRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PlayerRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type PlayerResponse struct {
	// API versioning
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Success              bool     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerResponse) Reset()         { *m = PlayerResponse{} }
func (m *PlayerResponse) String() string { return proto.CompactTextString(m) }
func (*PlayerResponse) ProtoMessage()    {}
func (*PlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{1}
}

func (m *PlayerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerResponse.Unmarshal(m, b)
}
func (m *PlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerResponse.Marshal(b, m, deterministic)
}
func (m *PlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerResponse.Merge(m, src)
}
func (m *PlayerResponse) XXX_Size() int {
	return xxx_messageInfo_PlayerResponse.Size(m)
}
func (m *PlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerResponse proto.InternalMessageInfo

func (m *PlayerResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *PlayerResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlayerResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PlayerFilter struct {
	// API versioning
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Keyword              string   `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerFilter) Reset()         { *m = PlayerFilter{} }
func (m *PlayerFilter) String() string { return proto.CompactTextString(m) }
func (*PlayerFilter) ProtoMessage()    {}
func (*PlayerFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{2}
}

func (m *PlayerFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerFilter.Unmarshal(m, b)
}
func (m *PlayerFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerFilter.Marshal(b, m, deterministic)
}
func (m *PlayerFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerFilter.Merge(m, src)
}
func (m *PlayerFilter) XXX_Size() int {
	return xxx_messageInfo_PlayerFilter.Size(m)
}
func (m *PlayerFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerFilter.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerFilter proto.InternalMessageInfo

func (m *PlayerFilter) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *PlayerFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

type PlayerId struct {
	// API versioning
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerId) Reset()         { *m = PlayerId{} }
func (m *PlayerId) String() string { return proto.CompactTextString(m) }
func (*PlayerId) ProtoMessage()    {}
func (*PlayerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{3}
}

func (m *PlayerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerId.Unmarshal(m, b)
}
func (m *PlayerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerId.Marshal(b, m, deterministic)
}
func (m *PlayerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerId.Merge(m, src)
}
func (m *PlayerId) XXX_Size() int {
	return xxx_messageInfo_PlayerId.Size(m)
}
func (m *PlayerId) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerId.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerId proto.InternalMessageInfo

func (m *PlayerId) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *PlayerId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*PlayerRequest)(nil), "player.PlayerRequest")
	proto.RegisterType((*PlayerResponse)(nil), "player.PlayerResponse")
	proto.RegisterType((*PlayerFilter)(nil), "player.PlayerFilter")
	proto.RegisterType((*PlayerId)(nil), "player.PlayerId")
}

func init() { proto.RegisterFile("player.proto", fileDescriptor_41d803d1b635d5c6) }

var fileDescriptor_41d803d1b635d5c6 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x9b, 0xd4, 0xa6, 0xe9, 0x10, 0x4b, 0x19, 0xaa, 0x2c, 0x39, 0xc9, 0x9e, 0x3c, 0x48,
	0x11, 0x05, 0x0f, 0x82, 0x78, 0x10, 0x94, 0x82, 0x07, 0xc9, 0x3f, 0x58, 0x9b, 0x01, 0x17, 0xd3,
	0xec, 0xba, 0xbb, 0x41, 0xf2, 0xef, 0xfc, 0x69, 0xd2, 0xdd, 0xa4, 0x58, 0xa9, 0xd8, 0xdb, 0x7c,
	0x2f, 0x93, 0xf7, 0x86, 0xc7, 0x42, 0xa6, 0x2b, 0xd1, 0x92, 0x59, 0x68, 0xa3, 0x9c, 0xc2, 0x24,
	0x10, 0x6f, 0xe1, 0xf8, 0xc5, 0x4f, 0x05, 0x7d, 0x34, 0x64, 0x1d, 0xce, 0x60, 0x28, 0xb4, 0x64,
	0xd1, 0x59, 0x74, 0x3e, 0x29, 0x36, 0x23, 0x4e, 0x21, 0x96, 0x25, 0x8b, 0xbd, 0x10, 0xcb, 0x12,
	0x73, 0x48, 0x1b, 0x4b, 0xa6, 0x16, 0x6b, 0x62, 0x43, 0xaf, 0x6e, 0x19, 0xe7, 0x30, 0xa2, 0xb5,
	0x90, 0x15, 0x3b, 0xf2, 0x1f, 0x02, 0x6c, 0x54, 0xfd, 0xa6, 0x6a, 0x62, 0xa3, 0xa0, 0x7a, 0xe0,
	0xcf, 0x30, 0xed, 0xa3, 0xad, 0x56, 0xb5, 0xa5, 0x03, 0xb2, 0x19, 0x8c, 0x6d, 0xb3, 0x5a, 0x91,
	0xb5, 0x3e, 0x3a, 0x2d, 0x7a, 0xe4, 0xb7, 0x90, 0x05, 0xb7, 0x47, 0x59, 0x39, 0x32, 0x7b, 0xbc,
	0x18, 0x8c, 0xdf, 0xa9, 0xfd, 0x54, 0xa6, 0x37, 0xec, 0x91, 0x5f, 0x40, 0x1a, 0xfe, 0x5d, 0x96,
	0xff, 0xdf, 0x70, 0xf5, 0x15, 0x41, 0x12, 0xd6, 0xf1, 0x0e, 0xe0, 0x89, 0x5c, 0x00, 0x8b, 0xf3,
	0x45, 0x57, 0xf1, 0xcf, 0x43, 0xf2, 0x93, 0x5d, 0xb5, 0xeb, 0x99, 0x0f, 0x2e, 0x23, 0xbc, 0x87,
	0xec, 0xc1, 0x90, 0x70, 0xd4, 0xd9, 0xed, 0x5f, 0xcd, 0x4f, 0x7f, 0xcb, 0xa1, 0x2e, 0x3e, 0xc0,
	0x1b, 0x98, 0x6c, 0xf3, 0x71, 0xb6, 0xbb, 0xb6, 0x2c, 0xff, 0x8c, 0x7e, 0x4d, 0xfc, 0x23, 0xb8,
	0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x19, 0x64, 0x24, 0xcb, 0x14, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayerClient interface {
	// Get all Players with filter - A server-to-client streaming RPC.
	GetPlayers(ctx context.Context, in *PlayerFilter, opts ...grpc.CallOption) (Player_GetPlayersClient, error)
	// Create a new Player - A simple RPC
	CreatePlayer(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*PlayerResponse, error)
	// Return a specific player based on its id
	GetPlayer(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*PlayerRequest, error)
}

type playerClient struct {
	cc *grpc.ClientConn
}

func NewPlayerClient(cc *grpc.ClientConn) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) GetPlayers(ctx context.Context, in *PlayerFilter, opts ...grpc.CallOption) (Player_GetPlayersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Player_serviceDesc.Streams[0], "/player.Player/GetPlayers", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerGetPlayersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_GetPlayersClient interface {
	Recv() (*PlayerRequest, error)
	grpc.ClientStream
}

type playerGetPlayersClient struct {
	grpc.ClientStream
}

func (x *playerGetPlayersClient) Recv() (*PlayerRequest, error) {
	m := new(PlayerRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) CreatePlayer(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*PlayerResponse, error) {
	out := new(PlayerResponse)
	err := c.cc.Invoke(ctx, "/player.Player/CreatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPlayer(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*PlayerRequest, error) {
	out := new(PlayerRequest)
	err := c.cc.Invoke(ctx, "/player.Player/GetPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
type PlayerServer interface {
	// Get all Players with filter - A server-to-client streaming RPC.
	GetPlayers(*PlayerFilter, Player_GetPlayersServer) error
	// Create a new Player - A simple RPC
	CreatePlayer(context.Context, *PlayerRequest) (*PlayerResponse, error)
	// Return a specific player based on its id
	GetPlayer(context.Context, *PlayerId) (*PlayerRequest, error)
}

func RegisterPlayerServer(s *grpc.Server, srv PlayerServer) {
	s.RegisterService(&_Player_serviceDesc, srv)
}

func _Player_GetPlayers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayerFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).GetPlayers(m, &playerGetPlayersServer{stream})
}

type Player_GetPlayersServer interface {
	Send(*PlayerRequest) error
	grpc.ServerStream
}

type playerGetPlayersServer struct {
	grpc.ServerStream
}

func (x *playerGetPlayersServer) Send(m *PlayerRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/CreatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).CreatePlayer(ctx, req.(*PlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/GetPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPlayer(ctx, req.(*PlayerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Player_serviceDesc = grpc.ServiceDesc{
	ServiceName: "player.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _Player_CreatePlayer_Handler,
		},
		{
			MethodName: "GetPlayer",
			Handler:    _Player_GetPlayer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlayers",
			Handler:       _Player_GetPlayers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "player.proto",
}
